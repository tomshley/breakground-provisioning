
OpenTofu used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
 <= read (data resources)

OpenTofu will perform the following actions:

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-github.github_branch_protection.repositories_protected_branches["integrationdevelopbreakground-provisioning"] will be created
  + resource "github_branch_protection" "repositories_protected_branches" {
      + allows_deletions                = false
      + allows_force_pushes             = false
      + blocks_creations                = false
      + enforce_admins                  = true
      + id                              = (known after apply)
      + lock_branch                     = false
      + pattern                         = "develop"
      + repository_id                   = (known after apply)
      + require_conversation_resolution = false
      + require_signed_commits          = false
      + required_linear_history         = false
    }

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-github.github_branch_protection.repositories_protected_branches["productionmainbreakground-provisioning"] will be created
  + resource "github_branch_protection" "repositories_protected_branches" {
      + allows_deletions                = false
      + allows_force_pushes             = false
      + blocks_creations                = false
      + enforce_admins                  = true
      + id                              = (known after apply)
      + lock_branch                     = false
      + pattern                         = "main"
      + repository_id                   = (known after apply)
      + require_conversation_resolution = false
      + require_signed_commits          = false
      + required_linear_history         = false
    }

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-github.github_repository.repositories["breakground-provisioning"] will be created
  + resource "github_repository" "repositories" {
      + allow_auto_merge            = false
      + allow_merge_commit          = true
      + allow_rebase_merge          = true
      + allow_squash_merge          = true
      + archived                    = false
      + auto_init                   = false
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = false
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "breakground-provisioning"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "COMMIT_MESSAGES"
      + squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = (known after apply)
      + visibility                  = "public"
      + web_commit_signoff_required = false

      + security_and_analysis {
        }
    }

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-gitlab.data.gitlab_project_branches.group_projects_branch_production_exists_data["breakground-provisioning"] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "gitlab_project_branches" "group_projects_branch_production_exists_data" {
      + branches = (known after apply)
      + id       = (known after apply)
      + project  = "50663307"
    }

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-gitlab.gitlab_project.group_projects["breakground-provisioning"] will be updated in-place
  ~ resource "gitlab_project" "group_projects" {
        id                                               = "50663307"
      + import_url                                       = (known after apply)
      + import_url_password                              = (sensitive value)
      + import_url_username                              = "tomshley"
        name                                             = "breakground-provisioning"
        tags                                             = []
        # (70 unchanged attributes hidden)

        # (2 unchanged blocks hidden)
    }

  # module.provisioning-backends-local-gl.module.provisioning-generic-organization-gitlab.gitlab_project_mirror.group_projects_mirrors_push["breakground-provisioning"] will be created
  + resource "gitlab_project_mirror" "group_projects_mirrors_push" {
      + enabled                 = true
      + id                      = (known after apply)
      + keep_divergent_refs     = true
      + mirror_id               = (known after apply)
      + only_protected_branches = true
      + project                 = "50663307"
      + url                     = (sensitive value)
    }

Plan: 4 to add, 1 to change, 0 to destroy.
