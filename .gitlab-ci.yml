#
# Copyright 2023 Tomshley LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# @author Thomas Schena @sgoggles <https://github.com/sgoggles> | <https://gitlab.com/sgoggles>
#

# Example:
# pipelines:
#   branches:
#     feature/*:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#     release/*:
#       - step:
#           trigger: 'automatic'
#           deployment: staging
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_release_to_release.sh
#       - step:
#           trigger: 'automatic'
#           deployment: prod
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_release_to_tag.sh
#     bugfix/*:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#     develop:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_developorhotfix_to_release.sh

#.tfmakeflow:flow_develop:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make validate
#
#.tfmakeflow:flow_release_to_release:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#
#.tfmakeflow:flow_release_to_tag:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply
#
#.tfmakeflow:flow_developorhotfix_to_release:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply
#
#.tfmakeflow:flow_released_tag:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply

# https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
# https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml
#
#stages:
#  - validate
#  - build
#  - release-candidate
#
#validate:
#  extends: .terraform:validate
#  needs: []
#
#build:
#  extends: .tfmake:plan
#
#release-candidate:
#  extends: .tfmake:apply
#  dependencies:
#    - build
#  environment:
#    name: $TF_STATE_NAME
#    action: start
#
.tware_core_exports_bootstrap:
  extends: .tware_core_exports_versions
  before_script:
    - export TF_ROOT="${CI_PROJECT_DIR}/terraform/backends/remote"  # The relative path to the root directory of the Terraform project
    - export TF_STATE_NAME="tomshley-breakground-provisioning"      # The name of the state file used by the GitLab Managed Terraform state backend
    - export SECURE_FILES_DOWNLOAD_PATH="${TF_ROOT}/"

.tware_core_exports_non_prod_bootstrap:
  extends: .tware_core_exports_bootstrap
  before_script:
    - export TWARE_HEXAGONAL_PLATFORM_PROJECT_VERSION=$TWARE_BUILD_VERSION
    - export TWARE_RELEASE="false"

.tware_core_exports_versions:
  before_script:
    - export TWARE_BUILD_VERSION="$(cat ${CI_PROJECT_DIR}/VERSION)"
    - export TWARE_BUILD_VERSION_NEXT=$(echo $TWARE_BUILD_VERSION | awk 'BEGIN { FS="." } { $3++;  if ($3 > 99) { $3=0; $2++; if ($2 > 99) { $2=0; $1++ } } } { printf "%d.%d.%d\n", $1, $2, $3 }')

.tware_provider_gitlab_scripted_develop:
  extends: [.tware_core_exports_non_prod_bootstrap, .tware_core_quality_run_base_code_quality]
  before_script:
    - cd ${TF_ROOT}
  script:
    - echo ".tware_provider_gitlab_scripted_develop beginning"
    - echo "TWARE_BUILD_VERSION=${TWARE_BUILD_VERSION}"
    - echo "TWARE_BUILD_VERSION_NEXT=${TWARE_BUILD_VERSION_NEXT}"

.tware_core_quality_run_base_code_quality:
  script:
    - echo ".tware_core_quality_run_base_code_quality beginning"

.tware_core_quality_run_scripted_with_resolvers:
  script:
    - echo ".tware_core_quality_run_scripted_with_resolvers beginning"

.tware_core_publish_prod_rc_push:
  script:
    - echo ".tware_core_publish_prod_rc_push beginning"

image:
  name: "registry.gitlab.com/tomshley/breakground-provisioning/provisioning_terraform:latest"

job1:
  script: echo "hello from job1"
  stage: test
job2:
  stage: job2
  extends: job1
  script: echo "hello from job2"

#  - validate-remote-backend
stages:
  - job2
  # - plan-remote-backend
  # - apply-remote-backend

#validate-remote-backend:
#  stage: validate-remote-backend
#  script:
#    - gitlab-terraform validate
#  allow_failure: true

plan-remote-backend:
  extends:
    - .tware_provider_gitlab_scripted_develop
  stage: plan-remote-backend
  script:
    - echo "plan-remote-backend"
    - echo "plan-remote-backend - TWARE_BUILD_VERSION=${TWARE_BUILD_VERSION}"
    - echo "plan-remote-backend - TWARE_BUILD_VERSION_NEXT=${TWARE_BUILD_VERSION_NEXT}"
#    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
#    - make init
#    - make plan

apply-remote-backend:
  before_script:
    - cd "${TF_ROOT}"
  variables:
    SECURE_FILES_DOWNLOAD_PATH: ./
  only:
    - tags
  except:
    - branches
  stage: apply-remote-backend
  script:
    - echo "apply-remote-backend"
#  script:
#    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
#    - make init
#    - make plan
#    - make apply
