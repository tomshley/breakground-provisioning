#
# Copyright 2023 Tomshley LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# @author Thomas Schena @sgoggles <https://github.com/sgoggles> | <https://gitlab.com/sgoggles>
#

# Example:
# pipelines:
#   branches:
#     feature/*:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#     release/*:
#       - step:
#           trigger: 'automatic'
#           deployment: staging
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_release_to_release.sh
#       - step:
#           trigger: 'automatic'
#           deployment: prod
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_release_to_tag.sh
#     bugfix/*:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#     develop:
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_develop.sh
#       - step:
#           trigger: 'automatic'
#           script:
#             - export TWARE_BUILD_DIR=/opt/atlassian/pipelines/agent/build/
#             - /bin/sh /opt/atlassian/pipelines/agent/build/.tware/provider/bitbucket/scripted/flow_developorhotfix_to_release.sh

#.tfmakeflow:flow_develop:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make validate
#
#.tfmakeflow:flow_release_to_release:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#
#.tfmakeflow:flow_release_to_tag:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply
#
#.tfmakeflow:flow_developorhotfix_to_release:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply
#
#.tfmakeflow:flow_released_tag:
#  resource_group: ${TF_STATE_NAME}
#  script:
#    - chdir terraform/backends/remote
#    - make init
#    - make plan
#    - make apply

# https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
# https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml
#
#stages:
#  - validate
#  - build
#  - release-candidate
#
#validate:
#  extends: .terraform:validate
#  needs: []
#
#build:
#  extends: .tfmake:plan
#
#release-candidate:
#  extends: .tfmake:apply
#  dependencies:
#    - build
#  environment:
#    name: $TF_STATE_NAME
#    action: start


image:
  name: "registry.gitlab.com/tomshley/breakground-provisioning/provisioning_terraform:latest"

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform/backends/remote  # The relative path to the root directory of the Terraform project
  TF_STATE_NAME: tomshley-breakground-provisioning      # The name of the state file used by the GitLab Managed Terraform state backend

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

#  - validate-remote-backend
stages:
  - plan-remote-backend
  - apply-remote-backend

#validate-remote-backend:
#  stage: validate-remote-backend
#  script:
#    - gitlab-terraform validate
#  allow_failure: true

plan-remote-backend:
  variables:
    SECURE_FILES_DOWNLOAD_PATH: ./
  stage: plan-remote-backend
  script:
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ls -al
    - make plan

apply-remote-backend:
  variables:
    SECURE_FILES_DOWNLOAD_PATH: ./
  only:
    - tags
  except:
    - branches
  stage: apply-remote-backend
  script:
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - ls -al
    - make plan
    - make apply
